// components/ChatBot.jsx
import React, { useEffect, useRef, useState } from "react";
import { aiService } from "../services/aiService";
import orderService from "../services/orderService";
import { useNavigate } from "react-router-dom";

/** Helpers */
const money = (n) => (n ?? 0).toLocaleString("vi-VN") + "‚Ç´";

/** R√∫t m·∫£ng ·ªü m·ªçi c·∫•u tr√∫c payload (data/orders/items/‚Ä¶) */
const pickAnyArray = (obj, depth = 0) => {
  if (!obj || depth > 4) return null;
  if (Array.isArray(obj)) return obj;
  if (typeof obj !== "object") return null;
  const priority = ["data", "orders", "items", "list", "results"];
  for (const k of priority) {
    if (obj[k] != null) {
      const hit = pickAnyArray(obj[k], depth + 1);
      if (hit) return hit;
    }
  }
  for (const k of Object.keys(obj)) {
    if (!priority.includes(k)) {
      const hit = pickAnyArray(obj[k], depth + 1);
      if (hit) return hit;
    }
  }
  return null;
};

/** G·ªçi 1 trang ƒë∆°n (truy·ªÅn ƒë√∫ng { params }) + b√≥c last_page linh ho·∫°t */
const fetchOrdersPage = async (page = 1) => {
  const r = await orderService.getUserOrders({ page });
  const items = pickAnyArray(r) || [];

  const meta = r?.meta || r?.data?.meta || {};
  const lastPage =
    meta.last_page ??
    r?.last_page ??
    r?.data?.last_page ??
    meta?.pagination?.last_page ??
    1;

  return { items, paging: { last_page: Number(lastPage) || 1 } };
};

/** Duy·ªát nhi·ªÅu trang ƒë·ªÉ t√¨m m√£ ORD-XXXX */
const findOrderByCodeAcrossPages = async (rawCode, maxPages = 10) => {
  const needle = rawCode.replace(/[\s_]/g, "-").toUpperCase();

  // trang 1 ƒë·ªÉ bi·∫øt last_page
  let items = [], paging = {};
  try {
    ({ items, paging } = await fetchOrdersPage(1));
  } catch {
    return null;
  }

  const tryFind = (list) =>
    list.find((o) => {
      const c = (
        o.code || o.order_code || o.order_number || o.reference || o.reference_code || o.number || ""
      ).toString().toUpperCase();
      return c === needle;
    });

  let hit = tryFind(items);
  if (hit) return hit;

  const limit = Math.min(maxPages, Math.max(1, paging?.last_page || 1));
  for (let p = 2; p <= limit; p++) {
    try {
      ({ items } = await fetchOrdersPage(p));
    } catch {
      break;
    }
    hit = tryFind(items);
    if (hit) return hit;
    if (!items.length) break;
  }
  return null;
};


/** Chu·∫©n ho√° object ƒë∆°n h√†ng v·ªÅ 1 format chung ƒë·ªÉ render */
const normalizeOrder = (o = {}) => {
  // M√£ ƒë∆°n (v√≠ d·ª• ORD-ABC123)
  const code =
    o.code ||
    o.order_code ||
    o.order_number ||
    o.reference ||
    o.reference_code ||
    o.number ||
    (typeof o.id !== "undefined" ? `ORD-${o.id}` : "");

  // Tr·∫°ng th√°i ƒë∆°n
  const statusRaw =
    o.status || o.order_status || o.state || o.orderState || "pending";
  const statusMap = {
    pending: "Ch·ªù x·ª≠ l√Ω",
    processing: "ƒêang x·ª≠ l√Ω",
    shipped: "ƒê√£ giao cho DVVC",
    delivering: "ƒêang giao",
    completed: "Ho√†n t·∫•t",
    canceled: "ƒê√£ h·ªßy",
    cancelled: "ƒê√£ h·ªßy",
    refunded: "ƒê√£ ho√†n ti·ªÅn",
  };
  const statusLabel = statusMap[String(statusRaw).toLowerCase()] || statusRaw;

  // Tr·∫°ng th√°i thanh to√°n
  const payRaw =
    o.payment_status ||
    o.paymentStatus ||
    o.pay_status ||
    o.payment_state ||
    (o.paid ? "paid" : "pending");
  const payMap = {
    pending: "Ch∆∞a thanh to√°n",
    paid: "ƒê√£ thanh to√°n",
    refunded: "Ho√†n ti·ªÅn",
  };
  const paymentLabel = payMap[String(payRaw).toLowerCase()] || payRaw;

  // T·ªïng ti·ªÅn (l·∫•y s·ªë ƒë·∫ßu ti√™n t√¨m th·∫•y)
  const coalesce = (...vals) => vals.find((v) => v !== undefined && v !== null);
  let total =
    coalesce(
      o.total_amount,
      o.total,
      o.grand_total,
      o.final_total,
      o.amount,
      o.price_total
    ) ?? 0;
  // N·∫øu backend tr·∫£ string "200000" ho·∫∑c "200.000 ƒë" ‚Üí r√∫t s·ªë
  if (typeof total === "string") {
    const digits = total.replace(/[^\d]/g, "");
    total = digits ? parseInt(digits, 10) : 0;
  }

  // S·ªë s·∫£n ph·∫©m
  const itemCount =
    o.items_count ||
    o.itemsCount ||
    o.quantity ||
    (Array.isArray(o.items) ? o.items.length : o.total_items) ||
    0;

  const createdAt = o.created_at || o.createdAt || o.created_date || null;

  return {
    id: o.id,
    code,
    status: statusRaw,
    statusLabel,
    paymentStatus: payRaw,
    paymentLabel,
    total,
    itemCount,
    createdAt,
    _raw: o, // gi·ªØ l·∫°i ƒë·ªÉ debug khi c·∫ßn
  };
};

/** ‚Äî‚Äî Cards ‚Äî‚Äî */
const BookCard = ({ book, onClick }) => (
  <button
    onClick={onClick}
    className="w-full text-left flex gap-3 p-2 rounded-xl hover:bg-amber-50 dark:hover:bg-gray-700"
  >
    <img
      src={book?.cover_url || book?.image || "/favicon.png"}
      alt={book?.title}
      className="w-12 h-16 object-cover rounded-lg"
    />
    <div className="flex-1">
      <div className="font-semibold line-clamp-1">{book?.title}</div>
      <div className="text-xs opacity-70 line-clamp-1">
        {book?.author?.name || book?.author_name}
      </div>
      <div className="text-sm text-amber-700 mt-1">{money(book?.price)}</div>
    </div>
  </button>
);

const OrderCard = ({ order }) => {
  const o = normalizeOrder(order);
  return (
    <div className="p-3 rounded-xl bg-amber-50 dark:bg-gray-700">
      <div className="text-sm font-semibold">ƒê∆°n {o.code || `#${o.id}`}</div>
      {o.createdAt && (
        <div className="text-xs opacity-70">
          ƒê·∫∑t ng√†y: {new Date(o.createdAt).toLocaleDateString("vi-VN")}
        </div>
      )}
      <div className="text-xs opacity-70">S·∫£n ph·∫©m: {o.itemCount}</div>
      <div className="text-xs">
        Tr·∫°ng th√°i: <span className="font-medium">{o.statusLabel}</span>
      </div>
      <div className="text-xs">
        Thanh to√°n: <span className="font-medium">{o.paymentLabel}</span>
      </div>
      <div className="text-xs">
        T·ªïng:{" "}
        <span className="font-semibold">
          {(o.total ?? 0).toLocaleString("vi-VN")}‚Ç´
        </span>
      </div>
      {/* ƒê√É B·ªé PH·∫¶N LINK "Xem chi ti·∫øt" */}
    </div>
  );
};

/** ‚Äî‚Äî Main ‚Äî‚Äî */
export default function ChatBot() {
  const [open, setOpen] = useState(false);
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [faqs, setFaqs] = useState([]);
  const [game, setGame] = useState(null);
  const endRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    resetConversation();
    aiService
      .faqs()
      .then((r) => setFaqs(r?.data?.faqs || []))
      .catch(() => {});
  }, []);
  useEffect(() => {
    if (endRef.current) endRef.current.scrollIntoView({ behavior: "smooth" });
  }, [messages, open]);

  const push = (m) => setMessages((prev) => [...prev, m]);
  const say = (t) => push({ role: "assistant", type: "text", content: t });
  const you = (t) => push({ role: "user", type: "text", content: t });

  const resetConversation = () => {
    setMessages([
      {
        role: "assistant",
        type: "text",
        content:
          "Ch√†o b·∫°n! M√¨nh l√† tr·ª£ l√Ω Secret Book üìö. Ch·ªçn nhanh b√™n d∆∞·ªõi ho·∫∑c nh·∫Øn ƒëi·ªÅu b·∫°n mu·ªën:",
      },
      { role: "assistant", type: "quick" },
    ]);
  };

  /** ‚Äî‚Äî INTENT DETECTOR ‚Äî‚Äî */
  const intentOf = (t) => {
    const s = t.toLowerCase();
      if (/\bord[-_ ]?[a-z0-9]+\b/i.test(s)) return "track";

  if (/mua|ƒë·∫∑t|ƒë·∫∑t s√°ch|m√¨nh mu·ªën mua|cho.*ƒë·∫∑t/.test(s)) return "buy";
    if (
      /g·ª£i √Ω|t∆∞ v·∫•n|th·ªÉ lo·∫°i|self-help|ti·ªÉu thuy·∫øt|trinh th√°m|thi·∫øu nhi|kinh doanh|khoa h·ªçc/.test(
        s
      )
    )
      return "suggest.category";
    if (/t√°c gi·∫£|c·ªßa .* (kh√¥ng|ko|\?)?/.test(s)) return "suggest.author";
    if (/ƒë∆°n g·∫ßn|mua g√¨|l·ªãch s·ª≠|ƒë∆°n h√†ng.*(g·∫ßn|th√°ng)/.test(s))
      return "orders.last";
    if (
      /freeship|mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn|thanh to√°n|ƒë·ªïi tr·∫£|b·∫£o h√†nh|giao h√†ng/.test(
        s
      )
    )
      return "faq";
    if (/li√™n h·ªá|ƒë·ªÉ l·∫°i s·ªë|email|ƒëƒÉng k√Ω nh·∫≠n th√¥ng tin/.test(s))
      return "contact";
    if (/g√≥p √Ω|ƒë√°nh gi√°|h√†i l√≤ng|t·ªá qu√°|hay qu√°/.test(s)) return "feedback";
    if (/combo|mua k√®m|kh√°ch hay mua k√®m|bundle/.test(s)) return "combo";
    if (/mini game|ƒëo√°n s√°ch|tr√≠ch d·∫´n|ch∆°i game/.test(s)) return "minigame";
    if (/khuy·∫øn m√£i|voucher|m√£ gi·∫£m|promo|gi·∫£m gi√°/.test(s)) return "promo";
    if (/bu·ªìn|vui|c√¥ ƒë∆°n|ƒë·ªông l·ª±c|nh·∫π nh√†ng|c·∫ßn.*ƒë·ªông l·ª±c/.test(s))
      return "mood";
    if (/theo d√µi.*ƒë∆°n|ƒë∆°n.*ƒë√¢u r·ªìi|m√£ ƒë∆°n|order\s?#?\d+/.test(s))
      return "track";
    if (/bestseller|b√°n ch·∫°y|trending|hot/.test(s)) return "trending";
    if (/nh·∫Øc.*ƒë·ªçc|l·ªãch ƒë·ªçc|th√≥i quen ƒë·ªçc|remind/.test(s)) return "remind";
    return "ai";
  };

  /** ‚Äî‚Äî SEND ‚Äî‚Äî */
const send = async () => {
  const text = input.trim();
  if (!text || loading) return;
  setInput("");
  you(text);

  // N·∫øu user g√µ th·∫≥ng m√£ ORD-xxxx ‚Üí tra lu√¥n
  if (/\bord[-_ ]?[a-z0-9]+\b/i.test(text)) {
    return handleTrack(text);
  }

  const intent = intentOf(text);

    try {
      switch (intent) {
        case "buy":
          return handleBuy(text);
        case "suggest.category":
          return handleSuggestByCategory(text);
        case "suggest.author":
          return handleSuggestByAuthor(text);
        case "orders.last":
          return handleRecentOrders();
        case "faq":
          return handleFAQ(text);
        case "contact":
          return handleContactFlow();
        case "feedback":
          return handleFeedbackFlow();
        case "combo":
          return handleCombo(text);
        case "minigame":
          return startMiniGame();
        case "promo":
          return handlePromo();
        case "mood":
          return handleMood(text);
        case "track":
          return handleTrack(text);
        case "trending":
          return handleTrending();
        case "remind":
          return handleRemindFlow(text);
        default:
          return handleAI(text);
      }
    } catch {
      say("C√≥ l·ªói nh·ªè. B·∫°n th·ª≠ l·∫°i gi√∫p m√¨nh nh√©.");
    }
  };

  /** ‚Äî‚Äî HANDLERS ‚Äî‚Äî */

  // Mua s√°ch
  const handleBuy = async (text) => {
    const title = text.replace(/mua|ƒë·∫∑t|quy·ªÉn|cho.*ƒë·∫∑t/gi, "").trim();
    say("M√¨nh ƒëang t√¨m s√°ch b·∫°n mu·ªën mua‚Ä¶");
    const r = await aiService.searchBooks(title || "");
    const list = (r?.data?.data || r?.data || []).slice(0, 3);
    if (!list.length)
      return say(
        "Ch∆∞a th·∫•y s√°ch tr√πng kh·ªõp. B·∫°n th·ª≠ ghi r√µ t√™n s√°ch ho·∫∑c t√°c gi·∫£ nh√©."
      );
    push({
      role: "assistant",
      type: "books",
      title: "C√≥ th·ªÉ b·∫°n mu·ªën:",
      books: list,
    });
    say("Ch·∫°m v√†o s√°ch ƒë·ªÉ xem chi ti·∫øt v√† ƒë·∫∑t mua.");
  };

  // G·ª£i √Ω theo th·ªÉ lo·∫°i
  const handleSuggestByCategory = async (text) => {
    const map = {
      "ti·ªÉu thuy·∫øt": "tieu-thuyet",
      "self-help": "self-help",
      "trinh th√°m": "trinh-tham",
      "thi·∫øu nhi": "thieu-nhi",
      "kinh doanh": "kinh-doanh",
      "khoa h·ªçc": "khoa-hoc",
    };
    const found = Object.keys(map).find((k) => text.toLowerCase().includes(k));
    if (found) {
      say(`ƒê√¢y l√† v√†i t·ª±a **${found}** ƒë√°ng ƒë·ªçc:`);
      const r = await aiService.byCategory(map[found]);
      const list = (r?.data?.data || r?.data || []).slice(0, 5);
      if (!list.length)
        return say(
          "Ch∆∞a c√≥ d·ªØ li·ªáu th·ªÉ lo·∫°i n√†y. B·∫°n th·ª≠ xem m·ª•c G·ª£i √ù tr√™n menu nh√©."
        );
      push({
        role: "assistant",
        type: "books",
        title: `${found.toUpperCase()}`,
        books: list,
      });
    } else {
      const rp = await aiService.featured();
      const list = (rp?.data?.data || rp?.data || [])
        .map((x) => x.book || x)
        .slice(0, 5);
      push({
        role: "assistant",
        type: "books",
        title: "G·ª£i √Ω h√¥m nay",
        books: list,
      });
    }
  };

  // G·ª£i √Ω theo t√°c gi·∫£
  const handleSuggestByAuthor = async (text) => {
    const author = text.replace(/(c·ªßa|t√°c gi·∫£|author)/gi, "").trim();
    say(`T√¨m s√°ch c·ªßa t√°c gi·∫£: ${author}‚Ä¶`);
    const r = await aiService.byAuthor(author);
    const list = (r?.data?.data || r?.data || []).slice(0, 5);
    if (!list.length)
      return say("Ch∆∞a th·∫•y s√°ch c·ªßa t√°c gi·∫£ ƒë√≥. B·∫°n th·ª≠ t√™n kh√°c nh√©.");
    push({
      role: "assistant",
      type: "books",
      title: `S√°ch c·ªßa ${author}`,
      books: list,
    });
  };

  // === FIX: 3 ƒë∆°n g·∫ßn nh·∫•t (ƒÉn m·ªçi d·∫°ng payload) ===
  const handleRecentOrders = async () => {
    say("M√¨nh ƒëang xem 3 ƒë∆°n g·∫ßn nh·∫•t c·ªßa b·∫°n‚Ä¶");
    try {
      const r = await orderService.getUserOrders({ page: 1 });
      const items = pickAnyArray(r) || [];
      if (!items.length) {
        console.debug("[ChatBot] orders raw:", r);
        return say(
          "C√≥ v·∫ª b·∫°n ch∆∞a c√≥ ƒë∆°n n√†o. V√†o Trang c√° nh√¢n ‚Ä∫ ƒê∆°n h√†ng ƒë·ªÉ t·∫°o ƒë∆°n ƒë·∫ßu ti√™n nh√©!"
        );
      }
      // sort m·ªõi ‚Üí c≈©
      const sorted = [...items].sort((a, b) => {
        const ta = new Date(a.created_at || a.createdAt || 0).getTime();
        const tb = new Date(b.created_at || b.createdAt || 0).getTime();
        return tb - ta;
      });
      push({ role: "assistant", type: "orders", orders: sorted.slice(0, 3) });
    } catch (e) {
      say(
        "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n. V√†o Trang c√° nh√¢n ‚Ä∫ ƒê∆°n h√†ng gi√∫p m√¨nh nh√©."
      );
      console.debug("[ChatBot] orders error:", e?.response?.data || e?.message);
    }
  };

  // FAQ ƒë·ªông
  const handleFAQ = async (text) => {
    if (!faqs.length)
      await aiService.faqs().then((r) => setFaqs(r?.data?.faqs || []));
    const hit = faqs.find(
      (f) =>
        new RegExp(f.q, "i").test(text) ||
        new RegExp((f.a || "").split(" ")[0] || "", "i").test(text)
    );
    if (hit) say(hit.a);
    else push({ role: "assistant", type: "faq", faqs });
  };

  // Thu th·∫≠p li√™n h·ªá
  const handleContactFlow = async () =>
    push({ role: "assistant", type: "form.contact" });

  // CSAT / g√≥p √Ω
  const handleFeedbackFlow = () =>
    push({ role: "assistant", type: "form.feedback" });

  // Combo / mua k√®m
  const handleCombo = async (text) => {
    say("ƒê·ªÅ xu·∫•t mua k√®m/combos‚Ä¶");
    const q = text.replace(/combo|mua k√®m|bundle/gi, "").trim();
    const r = await aiService.searchBooks(q);
    const base = (r?.data?.data || r?.data || [])[0];
    if (!base)
      return say("B·∫°n n√™u t√™n s√°ch ƒë·ªÉ m√¨nh g·ª£i √Ω combo chu·∫©n x√°c nh√©.");
    const sameAuthor = await aiService.byAuthor(base?.author_name || "");
    const list = (sameAuthor?.data?.data || sameAuthor?.data || [])
      .filter((b) => b.id !== base.id)
      .slice(0, 4);
    if (!list.length)
      return say("T·∫°m ch∆∞a c√≥ combo ph√π h·ª£p. B·∫°n th·ª≠ s√°ch kh√°c nh√©.");
    push({
      role: "assistant",
      type: "books",
      title: `Th∆∞·ªùng mua k√®m v·ªõi ‚Äú${base.title}‚Äù`,
      books: list,
    });
  };

  // Mini game ƒëo√°n s√°ch
  const startMiniGame = () => {
    const pool = [
      {
        quote: "‚ÄúKh√¥ng ai t·∫Øm hai l·∫ßn tr√™n c√πng m·ªôt d√≤ng s√¥ng.‚Äù",
        answer: "Tri·∫øt h·ªçc Hi L·∫°p",
      },
      {
        quote: "‚ÄúTa ch·ªâ c√≥ m·ªôt cu·ªôc ƒë·ªùi ƒë·ªÉ s·ªëng, h√£y s·ªëng sao cho ƒë√°ng.‚Äù",
        answer: "Tu·ªïi tr·∫ª ƒë√°ng gi√° bao nhi√™u",
      },
      { quote: "‚ÄúH√£y y√™u nh∆∞ ch∆∞a t·ª´ng b·ªã t·ªïn th∆∞∆°ng.‚Äù", answer: "Self-help" },
    ];
    const q = pool[Math.floor(Math.random() * pool.length)];
    setGame({ step: 1, quote: q.quote, answer: q.answer.toLowerCase() });
    say(
      `Mini game üéÆ: ƒêo√°n t√™n (ho·∫∑c th·ªÉ lo·∫°i) t·ª´ tr√≠ch d·∫´n:\n${q.quote}\n‚Üí Tr·∫£ l·ªùi c·ªßa b·∫°n l√†?`
    );
  };

  // Khuy·∫øn m√£i / m√£ gi·∫£m gi√°
  const handlePromo = async () => {
    say("ƒê·ªÉ m√¨nh xem khuy·∫øn m√£i h√¥m nay‚Ä¶");
    const r = await aiService.activeCoupons().catch(() => null);
    const items = r?.data?.data || r?.data || [];
    if (!items.length)
      return say(
        "Hi·ªán ch∆∞a c√≥ m√£ c√¥ng khai. B·∫°n theo d√µi banner/khuy·∫øn m√£i gi√∫p m√¨nh nh√©."
      );
    const lines = items
      .slice(0, 5)
      .map((c) => `‚Ä¢ ${c.code}: ${c.description || ""}`)
      .join("\n");
    say("M√£ ƒëang ho·∫°t ƒë·ªông:\n" + lines);
  };

  // G·ª£i √Ω theo mood
  const handleMood = async (text) => {
    const mapping = [
      {
        mood: /bu·ªìn|c√¥ ƒë∆°n/,
        cat: "self-help",
        note: "mang l·∫°i nƒÉng l∆∞·ª£ng t√≠ch c·ª±c",
      },
      {
        mood: /ƒë·ªông l·ª±c|h·∫øt ƒë·ªông l·ª±c/,
        cat: "self-help",
        note: "gi√∫p t√°i t·∫°o ƒë·ªông l·ª±c",
      },
      {
        mood: /nh·∫π nh√†ng|th∆∞ gi√£n/,
        cat: "ti·ªÉu thuy·∫øt",
        note: "nh·∫π nh√†ng d·ªÖ ƒë·ªçc",
      },
    ];
    const m = mapping.find((x) => x.mood.test(text.toLowerCase()));
    if (!m)
      return say(
        "B·∫°n m√¥ t·∫£ c·∫£m x√∫c/mong mu·ªën ƒë·ªçc ki·ªÉu g√¨? M√¨nh g·ª£i √Ω s√°t h∆°n nha."
      );
    say(`M√¨nh g·ª£i √Ω m·ªôt s·ªë s√°ch ${m.cat} ${m.note}:`);
    const r = await aiService.byCategory(m.cat);
    const list = (r?.data?.data || r?.data || []).slice(0, 5);
    if (!list.length)
      return say(
        "Ch∆∞a c√≥ d·ªØ li·ªáu ph√π h·ª£p. B·∫°n th·ª≠ t√¨m theo th·ªÉ lo·∫°i tr√™n menu nh√©."
      );
    push({
      role: "assistant",
      type: "books",
      title: `${m.cat.toUpperCase()}`,
      books: list,
    });
  };
  /** T√¨m ƒë∆°n theo m√£ (ORD-XXXX) qua nhi·ªÅu trang */


  /** Theo d√µi ƒë∆°n */
const handleTrack = async (text) => {
  const codeMatch = text.match(/\bord[-_ ]?[a-z0-9]+\b/i);

  // 1) ∆Øu ti√™n theo M√É ORD-XXXX
  if (codeMatch) {
    const needle = codeMatch[0].replace(/[\s_]/g, "-").toUpperCase();

    // N·∫øu b·∫°n c√≥ API t√¨m theo code th·∫≠t s·ª± th√¨ m·ªü c√°i n√†y v√† ch·ªânh endpoint ƒë√∫ng:
    // try {
    //   const r = await orderService.searchByCode(needle); // ch·ªâ d√πng khi c√≥
    //   const order = r?.data || r;
    //   if (order) return push({ role: "assistant", type: "orders", orders: [order] });
    // } catch {}

    // Fallback: duy·ªát nhi·ªÅu trang ƒë∆°n c·ªßa user
    const hit = await findOrderByCodeAcrossPages(needle, 10);
    if (hit) {
      return push({ role: "assistant", type: "orders", orders: [hit] });
    }
    return say("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªõi m√£ n√†y trong l·ªãch s·ª≠ g·∫ßn ƒë√¢y.");
  }

  // 2) N·∫øu KH√îNG c√≥ m√£ ORD-‚Ä¶, nh∆∞ng ng∆∞·ªùi d√πng g√µ TO√ÄN S·ªê ‚Üí th·ª≠ theo ID
  const pureId = text.trim().match(/^\d{1,10}$/);
  if (pureId) {
    try {
      const r = await orderService.getOrderById(pureId[0]);
      if (r) return push({ role: "assistant", type: "orders", orders: [r] });
    } catch (e) {
      console.debug("Get order error:", e?.response?.data || e?.message);
      return say("Kh√¥ng t√¨m th·∫•y ƒë∆°n theo ID b·∫°n cung c·∫•p.");
    }
  }

  // 3) Kh√¥ng kh·ªõp ƒë·ªãnh d·∫°ng
  return say('B·∫°n nh·∫≠p m√£ ƒë∆°n d·∫°ng "ORD-XXXXXX" ho·∫∑c s·ªë ID gi√∫p m√¨nh nh√©.');
};

  // Top trending / bestseller
  const handleTrending = async () => {
    const rp = await aiService.featured();
    const list = (rp?.data?.data || rp?.data || [])
      .map((x) => x.book || x)
      .slice(0, 5);
    if (!list.length) return say("Ch∆∞a c√≥ danh s√°ch b√°n ch·∫°y.");
    push({
      role: "assistant",
      type: "books",
      title: "B√°n ch·∫°y / ƒêang hot",
      books: list,
    });
  };

  // Nh·∫Øc l·ªãch ƒë·ªçc (local)
  const handleRemindFlow = async (text) => {
    const m = text.match(/(\d+)\s*(ph√∫t|gi·ªù|hours|minutes)/i);
    const minutes = m
      ? m[2].toLowerCase().startsWith("gi·ªù")
        ? parseInt(m[1], 10) * 60
        : parseInt(m[1], 10)
      : 30;
    say(
      `ƒê√£ ƒë·∫∑t nh·∫Øc ƒë·ªçc ${minutes} ph√∫t n·ªØa. M√¨nh s·∫Ω nh·∫Øc trong khung chat nh√©.`
    );
    setTimeout(
      () =>
        push({
          role: "assistant",
          type: "text",
          content: `‚è∞ ƒê·∫øn gi·ªù ƒë·ªçc s√°ch ${minutes} ph√∫t r·ªìi n√®!`,
        }),
      minutes * 60 * 1000
    );
  };

  // Fallback AI
  const handleAI = async (text) => {
    setLoading(true);
    try {
      const history = messages
        .filter((m) => m.type === "text" || m.type === "ai")
        .slice(-8)
        .map((m) => ({ role: m.role, content: m.content }));
      const r = await aiService.chat(text, history);
      push({
        role: "assistant",
        type: "text",
        content: r?.data?.reply || "M√¨nh ch∆∞a r√µ. B·∫°n n√≥i c·ª• th·ªÉ h∆°n nh√©.",
      });
    } catch {
      say("M√°y ch·ªß AI ƒëang b·∫≠n. B·∫°n ch·ªçn t√°c v·ª• nhanh b√™n d∆∞·ªõi gi√∫p m√¨nh nh√©.");
    } finally {
      setLoading(false);
      push({ role: "assistant", type: "quick" });
    }
  };

  /** ‚Äî‚Äî UI ‚Äî‚Äî */
  const renderMessage = (m, i) => {
    if (m.type === "quick") {
      return (
        <div key={i} className="flex flex-wrap gap-2">
          {[
            "Mua s√°ch",
            "G·ª£i √Ω theo th·ªÉ lo·∫°i",
            "G·ª£i √Ω theo t√°c gi·∫£",
            "ƒê∆°n g·∫ßn ƒë√¢y",
            "FAQ",
            "Khuy·∫øn m√£i",
            "Trending",
            "Mini game",
            "Nh·∫Øc ƒë·ªçc 30 ph√∫t",
          ].map((label) => (
            <button
              key={label}
              onClick={() => {
                you(label);
                setTimeout(() => {
                  if (label === "Mua s√°ch") handleBuy(label);
                  else if (label === "G·ª£i √Ω theo th·ªÉ lo·∫°i")
                    handleSuggestByCategory(label);
                  else if (label === "G·ª£i √Ω theo t√°c gi·∫£")
                    handleSuggestByAuthor(label);
                  else if (label === "ƒê∆°n g·∫ßn ƒë√¢y") handleRecentOrders();
                  else if (label === "FAQ") handleFAQ(label);
                  else if (label === "Khuy·∫øn m√£i") handlePromo();
                  else if (label === "Trending") handleTrending();
                  else if (label === "Mini game") startMiniGame();
                  else if (label === "Nh·∫Øc ƒë·ªçc 30 ph√∫t")
                    handleRemindFlow("nh·∫Øc t√¥i ƒë·ªçc 30 ph√∫t");
                }, 0);
              }}
              className={
                "px-3 py-2 rounded-full text-sm " +
                (label === "Mua s√°ch" || label === "ƒê∆°n g·∫ßn ƒë√¢y"
                  ? "bg-amber-600 text-white"
                  : "bg-amber-100 text-amber-800")
              }
            >
              {label}
            </button>
          ))}
        </div>
      );
    }
    if (m.type === "books") {
      return (
        <div key={i} className="space-y-2">
          {m.title && <div className="font-semibold">{m.title}</div>}
          {m.books.map((b, idx) => (
            <BookCard
              key={idx}
              book={b}
              onClick={() => (window.location.href = `/books/${b.id}`)}
            />
          ))}
        </div>
      );
    }
    if (m.type === "orders") {
      return (
        <div key={i} className="space-y-2">
          {(m.orders || []).map((o, idx) => (
            <OrderCard key={idx} order={o} />
          ))}
        </div>
      );
    }
    if (m.type === "faq") {
      return (
        <div key={i} className="space-y-2">
          <div className="font-semibold">FAQ</div>
          <ul className="list-disc pl-5 space-y-1 text-sm">
            {(m.faqs || []).map((f, idx) => (
              <li key={idx}>
                <button
                  className="underline"
                  onClick={() => {
                    you(f.q);
                    say(f.a);
                  }}
                >
                  {f.q}
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    }
    if (m.type === "form.contact")
      return (
        <ContactForm
          key={i}
          onSubmit={async (v) => {
            await aiService.contact(v);
            say("C·∫£m ∆°n b·∫°n! CSKH s·∫Ω li√™n h·ªá s·ªõm.");
          }}
        />
      );
    if (m.type === "form.feedback")
      return (
        <FeedbackForm
          key={i}
          onSubmit={async (v) => {
            await aiService.feedback(v.rating, v.notes);
            say("C·∫£m ∆°n g√≥p √Ω c·ªßa b·∫°n üíõ");
          }}
        />
      );

    return (
      <div
        key={i}
        className={
          "max-w-[85%] rounded-2xl px-3 py-2 whitespace-pre-wrap " +
          (m.role === "user"
            ? "ml-auto bg-amber-600 text-white"
            : "mr-auto bg-amber-100 dark:bg-gray-700")
        }
      >
        {m.content}
      </div>
    );
  };

  // Mini-game progression
  useEffect(() => {
    if (!game?.step) return;
    const last = messages[messages.length - 1];
    if (!last || last.role !== "user") return;
    const ans = (last.content || "").toLowerCase();
    if (game.step === 1) {
      if (ans.includes(game.answer)) {
        say("Ch√≠nh x√°c! üéâ T·∫∑ng b·∫°n m√£ gi·∫£m 5%: MINI5 (n·∫øu c√≤n hi·ªáu l·ª±c).");
        setGame(null);
      } else {
        say("Ch∆∞a ƒë√∫ng r·ªìi. B·∫°n ƒëo√°n l·∫°i nh√© (g√µ ‚Äúb·ªè qua‚Äù ƒë·ªÉ tho√°t).");
        setGame({ ...game, step: 2 });
      }
    } else if (game.step === 2) {
      if (ans.includes("b·ªè qua")) {
        say("Oke m√¨nh d·ª´ng mini game nh√©.");
        setGame(null);
      } else if (ans.includes(game.answer)) {
        say("Chu·∫©n r·ªìi! üéâ");
        setGame(null);
      } else {
        say(`ƒê√°p √°n g·ª£i √Ω: ${game.answer.toUpperCase()}. Th·ª≠ l·∫°i kh√¥ng?`);
        setGame(null);
      }
    }
    // eslint-disable-next-line
  }, [messages]);

  return (
    <>
      <button
        onClick={() => setOpen((v) => !v)}
        className="fixed bottom-6 right-6 z-40 rounded-full shadow-lg px-4 py-3 bg-amber-600 text-white hover:bg-amber-700"
      >
        {open ? "‚úñ" : "üí¨ Chat"}
      </button>

      {open && (
        <div className="fixed bottom-24 right-6 z-40 w-96 max-w-[92vw] h-[560px] bg-white dark:bg-gray-800 border border-amber-200 dark:border-gray-700 rounded-2xl shadow-2xl flex flex-col">
          <div className="p-3 border-b border-amber-100 dark:border-gray-700 flex items-center justify-between">
            <div className="font-semibold">Tr·ª£ l√Ω Secret Book</div>
            <button
              className="text-sm opacity-70 hover:opacity-100"
              onClick={resetConversation}
            >
              L√†m m·ªõi
            </button>
          </div>

          <div className="flex-1 overflow-y-auto p-3 space-y-3">
            {messages.map((m, i) => renderMessage(m, i))}
            {loading && (
              <div className="mr-auto bg-amber-100 dark:bg-gray-700 rounded-2xl px-3 py-2 max-w-[85%]">
                ƒêang so·∫°n tr·∫£ l·ªùi‚Ä¶
              </div>
            )}
            <div ref={endRef} />
          </div>

          <div className="p-3 border-t border-amber-100 dark:border-gray-700 flex gap-2">
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  send();
                }
              }}
              rows={1}
              placeholder="G√µ tin nh·∫Øn‚Ä¶"
              className="flex-1 resize-none rounded-xl border border-amber-200 dark:border-gray-700 px-3 py-2 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-amber-400"
            />
            <button
              onClick={send}
              className="rounded-xl bg-amber-600 text-white px-4 py-2"
            >
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </>
  );
}

/** ‚Äî‚Äî Sub-forms ‚Äî‚Äî */
function ContactForm({ onSubmit }) {
  const [v, setV] = useState({ name: "", email: "", phone: "", message: "" });
  return (
    <form
      className="space-y-2"
      onSubmit={(e) => {
        e.preventDefault();
        onSubmit(v);
      }}
    >
      <div className="font-semibold">Li√™n h·ªá CSKH</div>
      <input
        className="w-full px-3 py-2 rounded-lg border"
        placeholder="T√™n c·ªßa b·∫°n"
        value={v.name}
        onChange={(e) => setV({ ...v, name: e.target.value })}
        required
      />
      <input
        className="w-full px-3 py-2 rounded-lg border"
        placeholder="Email (tu·ª≥ ch·ªçn)"
        value={v.email}
        onChange={(e) => setV({ ...v, email: e.target.value })}
      />
      <input
        className="w-full px-3 py-2 rounded-lg border"
        placeholder="SƒêT (tu·ª≥ ch·ªçn)"
        value={v.phone}
        onChange={(e) => setV({ ...v, phone: e.target.value })}
      />
      <textarea
        className="w-full px-3 py-2 rounded-lg border"
        placeholder="B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?"
        value={v.message}
        onChange={(e) => setV({ ...v, message: e.target.value })}
        required
      />
      <button className="px-3 py-2 rounded-xl bg-amber-600 text-white">
        G·ª≠i li√™n h·ªá
      </button>
    </form>
  );
}

function FeedbackForm({ onSubmit }) {
  const [rating, setRating] = useState(5);
  const [notes, setNotes] = useState("");
  return (
    <form
      className="space-y-2"
      onSubmit={(e) => {
        e.preventDefault();
        onSubmit({ rating, notes });
      }}
    >
      <div className="font-semibold">ƒê√°nh gi√° tr·∫£i nghi·ªám</div>
      <div className="flex gap-1">
        {[1, 2, 3, 4, 5].map((n) => (
          <button
            key={n}
            type="button"
            onClick={() => setRating(n)}
            className={`px-2 py-1 rounded ${
              rating >= n
                ? "bg-amber-600 text-white"
                : "bg-amber-100 text-amber-800"
            }`}
          >
            {n}
          </button>
        ))}
      </div>
      <textarea
        className="w-full px-3 py-2 rounded-lg border"
        placeholder="G√≥p √Ω (tu·ª≥ ch·ªçn)"
        value={notes}
        onChange={(e) => setNotes(e.target.value)}
      />
      <button className="px-3 py-2 rounded-xl bg-amber-600 text-white">
        G·ª≠i ƒë√°nh gi√°
      </button>
    </form>
  );
}
